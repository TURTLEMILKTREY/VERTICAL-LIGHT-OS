"""
DEVELOPMENT TOOLING CONFIGURATION
Complete development environment setup for the Quality System v2.0

ADDRESSES DEVELOPER PAIN POINTS:
1. Complex setup processes
2. Inconsistent development environments
3. Manual testing procedures
4. Debugging difficulties
5. Deployment complexity
"""

# ============================================================================
# DOCKER DEVELOPMENT ENVIRONMENT
# ============================================================================

version: '3.8'

services:
  # Main application
  quality-system:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - DATABASE_URL=postgresql://dev_user:dev_pass@postgres:5432/quality_dev
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - quality_system_data:/app/data
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - quality_system_net
    restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=dev_user
      - POSTGRES_PASSWORD=dev_pass
      - POSTGRES_DB=quality_dev
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - quality_system_net
    restart: unless-stopped

  # Redis for caching and metrics
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - quality_system_net
    restart: unless-stopped

  # Elasticsearch for audit logs and analytics
  elasticsearch:
    image: elasticsearch:8.8.0
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - quality_system_net
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: kibana:8.8.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - quality_system_net
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - quality_system_net
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=dev_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - quality_system_net
    restart: unless-stopped

  # Load testing with k6
  k6:
    image: grafana/k6:latest
    volumes:
      - ./tests/load:/scripts
    command: run /scripts/load_test.js
    environment:
      - TARGET_HOST=quality-system:8000
    depends_on:
      - quality-system
    networks:
      - quality_system_net
    profiles:
      - testing

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  quality_system_data:

networks:
  quality_system_net:
    driver: bridge