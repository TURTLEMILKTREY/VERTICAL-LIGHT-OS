[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vertical-light-os"
version = "0.1.0"
description = "AI-Powered Hospital Consulting Operating System"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Vertical Light Team", email = "team@verticallight.ai"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Office/Business :: Financial",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["healthcare", "hospital", "consulting", "ai", "analytics"]
requires-python = ">=3.11"
dependencies = [
    "pydantic>=2.9.2",
    "fastapi>=0.115.0",
    "uvicorn>=0.32.0",
    "aiohttp>=3.10.10",
    "asyncio-mqtt>=0.16.2",
    "pyyaml>=6.0.2",
    "jsonschema>=4.23.0",
    "watchdog>=6.0.0",
    "python-multipart>=0.0.12",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "sqlalchemy>=2.0.36",
    "alembic>=1.13.3",
    "psycopg2-binary>=2.9.9",
    "redis>=5.1.1",
    "prometheus-client>=0.21.0",
    "structlog>=24.4.0",
    "docker>=7.1.0",
    "gunicorn>=23.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.0",
    "pytest-timeout>=2.3.1",
    "pytest-benchmark>=4.0.0",
    "httpx>=0.27.2",
    "black>=24.10.0",
    "isort>=5.13.2",
    "flake8>=7.1.1",
    "flake8-docstrings>=1.7.0",
    "flake8-type-checking>=2.7.2",
    "mypy>=1.13.0",
    "pre-commit>=4.0.1",
    "bandit[toml]>=1.7.9",
    "safety>=3.2.7",
    "coverage[toml]>=7.6.1",
    "sphinx>=8.0.2",
    "sphinx-rtd-theme>=2.0.0",
]
test = [
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.0",
    "pytest-timeout>=2.3.1",
    "httpx>=0.27.2",
]
docs = [
    "sphinx>=8.0.2",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=2.4.4",
    "myst-parser>=4.0.0",
]
security = [
    "bandit[toml]>=1.7.9",
    "safety>=3.2.7",
]

[project.urls]
Homepage = "https://github.com/TURTLEMILKTREY/VERTICAL-LIGHT-OS"
Documentation = "https://vertical-light-os.readthedocs.io"
Repository = "https://github.com/TURTLEMILKTREY/VERTICAL-LIGHT-OS"
"Bug Tracker" = "https://github.com/TURTLEMILKTREY/VERTICAL-LIGHT-OS/issues"
Changelog = "https://github.com/TURTLEMILKTREY/VERTICAL-LIGHT-OS/blob/main/CHANGELOG.md"

[tool.setuptools]
packages = ["backend", "shared", "config"]

[tool.setuptools.package-dir]
"" = "."

# Test Configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=backend",
    "--cov=shared",
    "--cov=config",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=85",
    "--junit-xml=reports/pytest.xml",
    "--timeout=300",
    "--maxfail=3",
]
testpaths = ["tests", "backend/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "security: Security tests",
    "performance: Performance tests",
    "regression: Regression tests",
    "smoke: Smoke tests",
    "api: API tests",
    "database: Database tests",
    "async: Async tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
asyncio_mode = "auto"

# Coverage Configuration
[tool.coverage.run]
source = ["backend", "shared", "config"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "*/.tox/*",
    "*/setup.py",
    "*/conftest.py",
]
branch = true
parallel = true

[tool.coverage.report]
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Black Configuration
[tool.black]
line-length = 88
target-version = ['py311', 'py312', 'py313']
include = '\\.pyi?$'
extend-exclude = '''
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
  | migrations
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true
known_first_party = ["backend", "shared", "config"]
known_third_party = ["pydantic", "fastapi", "sqlalchemy", "pytest"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# MyPy Configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = false
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "uvicorn.*",
    "gunicorn.*",
    "prometheus_client.*",
    "redis.*",
    "docker.*",
]
ignore_missing_imports = true

# Bandit Security Configuration
[tool.bandit]
exclude_dirs = ["tests", "*/tests/*", ".venv", "venv"]
skips = ["B101", "B601"]  # Skip assert and shell usage in tests

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

# Flake8-like configuration via pyproject.toml
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "DTZ", # flake8-datetimez
    "Q",   # flake8-quotes
    "TID", # flake8-tidy-imports
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "NPY", # numpy
    "RUF", # ruff-specific
]
ignore = [
    "E501",   # Line too long (handled by black)
    "B008",   # Do not perform function calls in argument defaults
    "B905",   # zip without strict
    "TRY003", # Avoid specifying long messages outside exception class
]
unfixable = ["ERA001"]  # Don't auto-remove commented code

[tool.ruff.per-file-ignores]
"tests/*" = ["ARG", "PGH", "TRY"]
"*/migrations/*" = ["ARG", "PGH"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["backend", "shared", "config"]